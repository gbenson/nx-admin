---
- hosts: slice
  vars:
    wifi_ssid: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      653737326532336339313339613964313332343935616232333963323034633635
      366139653432616436313863613536323534616663313466346564323263640a65
      326433356130613461613339613061326165373266643231326363353534363335
      3430653962386430343739313131323135623565373033313133303363370a6236
      346637313461303261613666393031336533306537313634383635373032336535
      3866356134656361626639663931366338633966356638333930633634
    wifi_psk: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      636465303230306464376334313237366637333938633738653665363763653364
      366334633435613738613637323865393836643432633766303464366263630a38
      326135366236656663393839373235376633653239656464316262663566363436
      3465623932376232356331613163393063313566663131663230643435300a6134
      336566386566313163313865343061633838326630643430656334623763

  tasks:
    - debug:
        var: ansible_facts
      tags:
        - debug

    - name: Remote user's home directory has correct permissions
      ansible.builtin.file:
        path: "{{ ansible_user_dir }}"
        mode: "og-rwx"
      tags:
        - users

    - name: Remote user is in correct groups
      ansible.builtin.user:
        name: "{{ ansible_user_id }}"
        groups: sudo
      become: yes
      tags:
        - users

    - name: Remote user has safe bash aliases
      ansible.builtin.copy:
        dest: ~/.bash_aliases
        content: |
          alias ll="ls -l"
          alias rm="rm -i"
          alias cp="cp -i"
          alias mv="mv -i"

    - name: System has predictable network interface names
      ansible.builtin.file:
        path: "/etc/systemd/network/{{ item }}"
        # For eth[012] create symlinks to /dev/null to
        # mask the files in /usr/lib/systemd/network.
        # This is the Raspbian GNU/Linux 11 (bullseye)
        # default:
        #   state: link
        #   src: /dev/null
        #
        # For enx[0-9a-f]{12}, delete the symlinks to
        # unmask the rules in /usr/lib/systemd/network:
        #   state: absent
        state: absent
      loop:
        - 99-default.link
        - 73-usb-net-by-mac.link
      become: yes
      tags:
        - network

    - name: Wi-Fi is configured
      ansible.builtin.copy:
        dest: /etc/wpa_supplicant/wpa_supplicant.conf
        owner: root
        group: root
        mode: "0600"
        content: |
          ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
          update_config=1
          country=GB

          network={
              ssid="{{ wifi_ssid }}"
              psk="{{ wifi_psk }}"

              # List of acceptable protocols
              # RSN is WPA2
              proto=RSN
              # List of acceptable key management protocols
              key_mgmt=WPA-PSK
              # List of allowed IEEE 802.11 authentication algorithms
              auth_alg=OPEN
              # List of acceptable pairwise (unicast) ciphers for WPA
              # CCMP is AES (in Counter mode with CBC-MAC)
              pairwise=CCMP
              # List of acceptable group (multicast) ciphers for WPA
              group=CCMP
          }
      become: yes
      tags:
        - network

    - name: Required packages are installed
      ansible.builtin.apt:
        pkg:
          - python3-venv
          - redis-server
          - screen
          - tcpdump
      become: yes
      tags:
        - packages
        - redis

    - name: Redis has correct configuration
      ansible.builtin.lineinfile:
        path: /etc/redis/redis.conf
        regexp: ^#?\s*({{ item.keyword }})(\s+{{ item.args }})?
        line: \g<1> {{ item.args }}
        backrefs: yes
      loop:
        - { keyword: bind,           args: 127.0.0.1 }
        - { keyword: protected-mode, args: "yes" }
        - { keyword: maxclients,     args: 100 }
      become: yes
      tags:
        - redis

    - name: Redis is enabled and running
      ansible.builtin.systemd:
        name: redis
        enabled: true
        masked: no
        state: started
      become: yes
      tags:
        - redis

    - name: Root-owned deployment directories exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: "0755"
      loop:
        - /opt/nx
        - /opt/nx/bin
        - /var/lib/nx
      become: yes
      tags:
        - deploy

    - name: Deployment user exists and is in correct groups
      ansible.builtin.user:
        name: nx-deploy
        password: "*"
        home: /var/lib/nx/deploy
        umask: "0077"
        groups: []
      become: yes
      tags:
        - deploy
        - users

    - name: Deployment-user-owned directories exist
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: directory
        owner: nx-deploy
        group: nx-deploy
        mode: "{{ item.mode }}"
      loop:
        - { path: ~nx-deploy,         mode: "0700" }
        - { path: ~nx-deploy/.ssh,    mode: "0700" }
        - { path: /var/lib/nx/wheels, mode: "0755" }
        - { path: /opt/nx/workers,    mode: "0755" }
      become: yes
      tags:
        - deploy

    - name: Deployment user has ~/.ssh/authorized_keys
      ansible.builtin.copy:
        src: ~/.ssh/authorized_keys
        dest: ~nx-deploy/.ssh/authorized_keys
        owner: nx-deploy
        group: nx-deploy
        mode: "0600"
      become: yes
      tags:
        - deploy

    - name: Sniffers group exists
      ansible.builtin.group:
        name: nx-sniffers
        state: present
      become: yes
      tags:
        - workers
        - users

    - name: Enhanced capability packet-sniffing Python exists
      ansible.builtin.script:
        cmd: >
          mksnython.sh
          {{ ansible_facts['python']['executable'] }}
          /opt/nx/bin
      args:
        executable: /bin/bash
      register: mksnython
      changed_when:
        - mksnython.rc == 0
      failed_when:
        - mksnython.rc != 0
        - mksnython.rc != 2
      become: yes
      tags:
        - workers

    - name: Create workers
      ansible.builtin.include_tasks:
        file: tasks/worker.yml
        apply:
          tags:
            - always
      loop:
        - carla
        - daniel
      tags:
        - workers
        - users
