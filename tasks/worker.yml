---
- name: "{{ name | title }}'s service unit override directory exists"
  ansible.builtin.file:
    path: "/etc/systemd/system/{{ name }}.service.d"
    state: directory
    owner: root
    group: root
    mode: "0755"
  when: "'credentials' in worker or 'environment' in worker"
  become: yes

- name: "{{ name | title }}'s environment variables are configured"
  ansible.builtin.copy:
    dest: /etc/systemd/system/{{ name }}.service.d/environment.conf
    owner: root
    group: root
    mode: "0644"
    content: |
      [Service]
      {% for item in envvars %}
      Environment="{{ item.upper() }}={{ envvars[item] }}"
      {% endfor %}
  vars:
    envvars: "{{ worker.environment | default(None) }}"
  when: "envvars"
  become: yes

- name: "{{ name | title }}'s credentials are installed"
  ansible.builtin.copy:
    dest: "/opt/nx/secrets/{{ name }}.{{ item | regex_replace('_', '.') }}"
    owner: root
    group: root
    mode: "0600"
    content: |
      {{ credentials[item] }}
  loop: "{{ credentials | list }}"
  vars:
    credentials: "{{ worker.credentials | default(None) }}"
  when: "credentials"
  become: yes

- name: "{{ name | title }}'s credentials are configured"
  ansible.builtin.copy:
    dest: /etc/systemd/system/{{ name }}.service.d/credentials.conf
    owner: root
    group: root
    mode: "0644"
    content: |
      [Service]
      {% for item in credentials %}
      {% set item = item.replace("_", ".") %}
      LoadCredential={{ item }}:/opt/nx/secrets/{{ name }}.{{ item }}
      {% endfor %}
  vars:
    credentials: "{{ worker.credentials | default(None) }}"
  when: "credentials"
  become: yes

- name: "{{ name | title }}'s systemd service unit is configured"
  ansible.builtin.copy:
    dest: "/etc/systemd/system/{{ name }}.service"
    owner: root
    group: root
    mode: "0644"
    content: |
      [Unit]
      Description={{ name | title }}
      Wants=redis.target
      Documentation=https://github.com/gbenson/nx-workers

      [Service]
      Type=simple
      ExecStart=/opt/nx/workers/bin/{{ name }}
      {% if is_reloadable %}
      ExecReload=/bin/kill -HUP $MAINPID
      {% endif %}
      Restart=always

      DynamicUser=yes
      {% if capabilities %}

      AmbientCapabilities={{ capabilities }}    # Grant the capability
      CapabilityBoundingSet={{ capabilities }}  # Don't ever get others
      {% else %}
      CapabilityBoundingSet=
      {% endif %}
      NoNewPrivileges=yes

      ProtectSystem=strict
      ProtectHome=yes
      PrivateTmp=yes
      PrivateDevices=yes
      ProtectKernelLogs=yes
      ProtectKernelTunables=yes
      ProtectControlGroups=yes
      ReadOnlyDirectories=/
      UMask=077

      {% if worker.only_localhost | default(False) %}
      IPAddressAllow=localhost
      IPAddressDeny=any
      RestrictNetworkInterfaces=lo
      RestrictAddressFamilies=AF_INET
      {% if worker.environment | default(None) %}
      {% if worker.environment.port | default(None) %}
      SocketBindAllow=ipv4:tcp:{{ worker.environment.port }}
      {% endif %}
      {% endif %}
      SocketBindDeny=any

      {% endif %}
      [Install]
      WantedBy=multi-user.target
  vars:
    capabilities: "{{ worker.capabilities | default(None) }}"
    is_reloadable: "{{ worker.reloadable | default(True) }}"
  become: yes

- name: "{{ name | title }} is {{ target_state }}"
  ansible.builtin.systemd:
    name: "{{ name }}"
    enabled: "{{ 'true' if is_enabled else 'false' }}"
    masked: no
    state: "{{ 'started' if is_enabled else 'stopped' }}"
  vars:
    is_enabled: "{{ worker.enabled | default(True) }}"
    target_state: |
      {% if is_enabled %}
      enabled and running
      {% else %}
      disabled and stopped
      {% endif %}
  become: yes
